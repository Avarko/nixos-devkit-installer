{ config, pkgs, ... }:

{ config, pkgs, lib, ... }:
let
  dbeaver_21_1_0 = import (builtins.fetchTarball https://github.com/nixos/nixpkgs/tarball/de7e0f7dee2deeda620e0c940362e2e63ad5f6bf) { config = config.nixpkgs.config; };
  latestmeld = import (builtins.fetchTarball https://github.com/nixos/nixpkgs/tarball/468cb5980b56d348979488a74a9b5de638400160) { config = config.nixpkgs.config; };
in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];
  nixpkgs.overlays = [
    (import "${builtins.fetchTarball https://github.com/vlaci/openconnect-sso/archive/master.tar.gz}/overlay.nix")
  ];

  nixpkgs.config.allowUnfree = true;

  # Use the GRUB 2 boot loader.
  boot.loader.grub.enable = true;
  boot.loader.grub.version = 2;
  boot.loader.grub.device = "/dev/sda";

  networking = {
    hostName = "${DEVKIT_HOSTNAME}";
    useDHCP = false;
    useNetworkd = true;
    interfaces.ens33.useDHCP = true;
    networkmanager = {
      enable = false;
      #dns = "systemd-resolved";
    };
    firewall.enable = false;
  };
  services.resolved = {
    enable = true;
    dnssec = "false";
  };
  # 2020-12-25 Bug in systemd-resolved, workaround:
  systemd.services.systemd-resolved.environment = with lib; {
    LD_LIBRARY_PATH = "${getLib pkgs.libidn2}/lib";
  };

  # Set your time zone.
  time.timeZone = "${DEVKIT_TIMEZONE}";

  # Select internationalisation properties.
  i18n.defaultLocale = "${DEVKIT_LOCALE}";
  console = {
    font = "${DEVKIT_FONT}";
    keyMap = "${DEVKIT_KEYMAP}";
  };

  users.users.root = { password = "${DEVKIT_ROOT_PASSWORD}"; };
  users.groups.${DEVKIT_USERNAME} = {
    name = "${DEVKIT_USERNAME}";
    members = [ "${DEVKIT_USERNAME}" ];
  };
  users.users.${DEVKIT_USERNAME} = {
    description = "${DEVKIT_USERNAME}";
    name = "${DEVKIT_USERNAME}";
    group = "${DEVKIT_USERNAME}";
    extraGroups = [ "users" "wheel" "docker" ];
    isNormalUser = true;
    password = "${DEVKIT_PASSWORD}";
    home = "/home/${DEVKIT_USERNAME}";
    createHome = true;
    useDefaultShell = true;
    uid = 1000;
  };  

  environment.systemPackages = let
    extensions = (with pkgs.vscode-extensions; [
      bbenoist.Nix
      ms-python.python
      ms-azuretools.vscode-docker
    ]);
    vscodium-with-extensions = pkgs.vscode-with-extensions.override {
      vscode = pkgs.vscodium;
      vscodeExtensions = extensions;
    };
  in with pkgs; [
      dhcpcd nettools openresolv
      coreutils
      findutils
      bind
      gitAndTools.gitFull gitAndTools.pre-commit
      direnv nix-direnv
      wget curl vim nano
      zip unzip
      rng-tools gnupg gopass
      openconnect-sso
      vscodium-with-extensions
      firefoxWrapper google-chrome
      azure-cli
      kcolorchooser
      sublime3
      gthumb
      kitty
      xsel
      dbeaver_21_1_0.dbeaver
      docker-compose
      awscli2
      jq yq
      lastpass-cli
      filezilla
      gparted
      parted
      wine
      openjdk11
      (with eclipses; eclipseWithPlugins {
        eclipse = eclipse-platform;
        jvmArgs = [ "-Xmx2048m" ];
        plugins = with plugins; [
          color-theme
          checkstyle          
        ];
      })
      apache-directory-studio
      powershell
      latestmeld.meld
      bitwarden bitwarden-cli
    ];

  fonts.fonts = with pkgs; [
    # Evolver's (Google) Raleway font
    raleway
    noto-fonts
    noto-fonts-cjk
    noto-fonts-emoji
    liberation_ttf
    fira-code
    fira-code-symbols
    mplus-outline-fonts
    dina-font
    proggyfonts
  ];

  # nix options for derivations to persist garbage collection
  nix.extraOptions = ''
    keep-outputs = true
    keep-derivations = true
  '';
  environment.pathsToLink = [
    "/share/nix-direnv"
  ];
  
  services.timesyncd.enable = true;
  programs.fuse.userAllowOther = true;
  programs.seahorse.enable = true;
  services.gnome.gnome-keyring.enable = true;

  programs.bash.shellAliases = {
    code = "codium";
    subl = "sublime";
  };

  programs.tmux =
    let
      plugins = with pkgs; [
        tmuxPlugins.continuum
        tmuxPlugins.sensible
        tmuxPlugins.resurrect
        tmuxPlugins.yank
        tmuxPlugins.tmux-colors-solarized
      ];
    in
    {
      enable = true;
      clock24 = true;
      newSession = false;
      extraConfig = ''
        set -g default-terminal "screen-256color"
        setw -g xterm-keys on
        setw -g mouse on
        set -sg repeat-time 600                   # increase repeat timeout
        set -s focus-events on
        set -g prefix2 C-a                        # GNU-Screen compatible prefix
        bind C-a send-prefix -2
        set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
        setw -q -g utf8 on
        set -g history-limit 20000
        set -g buffer-limit 20
        set -sg escape-time 0
        set -g display-time 1500
        set -g remain-on-exit off
        set -g repeat-time 300
        setw -g allow-rename off
        setw -g automatic-rename off
        setw -g aggressive-resize on    
        # -- display -------------------------------------------------------------------
        set -g base-index 1           # start windows numbering at 1
        setw -g pane-base-index 1     # make pane numbering consistent with windows
        setw -g automatic-rename on   # rename window to reflect current program
        set -g renumber-windows on    # renumber windows when a window is closed
        set -g set-titles on          # set terminal title
        set -g display-panes-time 800 # slightly longer pane indicators display time
        set -g display-time 1000      # slightly longer status messages display time
        set -g status-interval 10     # redraw status line every 10 seconds
        # clear both screen and history
        bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history
        # activity
        set -g monitor-activity on
        set -g visual-activity off
        set-window-option -g mode-keys vi
        # -- navigation ----------------------------------------------------------------
        # create session
        bind C-c new-session
        # find session
        bind C-f command-prompt -p find-session 'switch-client -t %%'
        # split current window horizontally
        bind - split-window -v
        # split current window vertically
        bind _ split-window -h
        bind c new-window
        # pane navigation
        bind -r h select-pane -L  # move left
        bind -r j select-pane -D  # move down
        bind -r k select-pane -U  # move up
        bind -r l select-pane -R  # move right
        bind > swap-pane -D       # swap current pane with the next one
        bind < swap-pane -U       # swap current pane with the previous one
        # pane resizing
        bind -r H resize-pane -L 2
        bind -r J resize-pane -D 2
        bind -r K resize-pane -U 2
        bind -r L resize-pane -R 2
        # window navigation
        unbind n
        unbind p
        bind -r C-h previous-window # select previous window
        bind -r C-l next-window     # select next window
        bind Tab last-window        # move to last active window
        # Kill pane/window/session shortcuts
        bind x kill-pane
        bind X kill-window
	# Window setup
	bind C-x new-window -c ~ \; split-window -h -c ~ \; split-window -v -c ~ \; select-pane -t 1 \; split-window -v -c ~ \; select-pane -t 1
        # -- buffers -------------------------------------------------------------------
        bind b list-buffers  # list paste buffers
        bind p paste-buffer  # paste from the top paste buffer
        bind P choose-buffer # choose which buffer to paste from
        bind d delete-buffer

        bind -T copy-mode    DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
        bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
        bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
        bind -T copy-mode    TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
        bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
        bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
        bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"
        set -g @yank_action 'copy-pipe-no-clear'
        bind -T copy-mode    C-c send -X copy-pipe-no-clear "xsel -i --clipboard"
        bind -T copy-mode-vi C-c send -X copy-pipe-no-clear "xsel -i --clipboard"

	set -g window-style 'fg=#4a5e6f,bg=#eaeaea'
	set -g window-active-style 'fg=#4a5e6f,bg=#f8f8f8'

        ${lib.concatStrings (map (x: "run-shell ${x.rtp}\n") plugins)}
      '';
    };

  nix.allowedUsers = [ "@wheel" ];
  nix.trustedUsers = [ "root" "@wheel" ];
  security.sudo.extraConfig =
    ''
      Defaults:root,%wheel env_keep+=LOCALE_ARCHIVE
      Defaults:root,%wheel env_keep+=NIX_PATH
      Defaults:root,%wheel env_keep+=TERMINFO_DIRS
      Defaults env_keep+=SSH_AUTH_SOCK
      Defaults lecture = never
      root   ALL=(ALL) SETENV: ALL
      %wheel ALL=(ALL) NOPASSWD: ALL, SETENV: ALL
    '';

  fileSystems."/mnt/hgfs" = {
    device = ".host:/";
    fsType = "fuse./run/current-system/sw/bin/vmhgfs-fuse";
    options = [ "umask=22" "uid=1000" "gid=1000" "allow_other" "nonempty" "nofail" "defaults" "auto_unmount" ];
  };

  virtualisation.docker.enable = true;
  virtualisation.vmware.guest.enable = true;  

  
  services.xserver = {
    enable = true;
    desktopManager = {
      xfce.enable = true;
    };
    displayManager.defaultSession = "xfce";
    layout = "${DEVKIT_X11_LAYOUT}";
    xkbOptions = "${DEVKIT_XKB_OPTIONS}";
  };

  system.stateVersion = "21.05";

}
